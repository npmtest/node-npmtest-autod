{"/home/travis/build/npmtest/node-npmtest-autod/test.js":"/* istanbul instrument in package npmtest_autod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-autod/lib.npmtest_autod.js":"/* istanbul instrument in package npmtest_autod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_autod = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_autod = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-autod/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-autod && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_autod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_autod\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_autod.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_autod.rollup.js'] =\n            local.assetsDict['/assets.npmtest_autod.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_autod.__dirname +\n                    '/lib.npmtest_autod.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-autod/node_modules/autod/index.js":"/*!\n * autod - lib/autod.js\n * Copyright(c) 2013\n * Author: dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('autod');\nvar crequire = require('crequire');\nvar babel = require('babel-core');\nvar bagpipe = require('bagpipe');\nvar pkg = require('./package');\nvar semver = require('semver');\nvar urllib = require('urllib');\nvar path = require('path');\nvar util = require('util');\nvar fs = require('fs');\n\nvar MODULE_REG = /^(@[0-9a-zA-Z\\-\\_][0-9a-zA-Z\\.\\-\\_]*\\/)?([0-9a-zA-Z\\-\\_][0-9a-zA-Z\\.\\-\\_]*)/;\n\nvar Autod = function (options) {\n  if (!(this instanceof Autod)) {\n    return new Autod(options);\n  }\n  options = options || {};\n  if (!options.root) {\n    throw new Error('need options.root!');\n  }\n  this.root = path.resolve(options.root);\n\n  EventEmitter.call(this);\n\n  this.exclude = options.exclude || [];\n  if (!Array.isArray(this.exclude)) {\n    this.exclude = [this.exclude];\n  }\n\n  this.exclude = this.exclude.concat(['node_modules', '.git', 'cov', 'coverage']);\n  this.exclude = this.resolveWithRoot(this.exclude);\n  this.testRoots = options.test || [];\n  this.testRoots = this.testRoots.concat(['test', 'benchmark', 'example', 'example.js']);\n  this.testRoots = this.resolveWithRoot(this.testRoots);\n  this.testRoots = this.removeExclude(this.testRoots);\n  this.registry = (options.registry || 'https://registry.npmjs.org').replace(/\\/$/, '');\n  this.dep = options.dep || [];\n  this.devdep = options.devdep || [];\n  this.dependencyMap = {};\n  this.semver = options.semver || {};\n  this.notransform = options.notransform;\n  if (options.plugin) {\n    try {\n      var pluginPath = path.join(process.cwd(), 'node_modules', options.plugin);\n      this.plugin = require(pluginPath);\n    } catch (err) {\n      throw new Error('plugin ' + options.plugin + ' not exist!');\n    }\n  }\n};\n\nutil.inherits(Autod, EventEmitter);\n\n/**\n * @api private\n */\nAutod.prototype.findJsFile = function (root, exclude) {\n  try {\n      if (fs.statSync(root).isFile()) {\n      return [root];\n    }\n  } catch (err) {\n    // ignore\n  }\n\n  //exclude path\n  exclude = exclude || [];\n  if (!Array.isArray(exclude)) {\n    exclude = [exclude];\n  }\n  var excludeMap = {};\n  exclude.forEach(function (e) {\n    excludeMap[e] = 1;\n  });\n\n  function parseDir(dir) {\n    if (!dir) {\n      return {\n        dirs: [],\n        jsFiles: []\n      };\n    }\n    dir = path.resolve(dir);\n    var files = [];\n    var dirs = [];\n    var jsFiles = [];\n    try {\n      files = fs.readdirSync(dir);\n    } catch (err) {\n      return {\n        dirs: dirs,\n        jsFiles: jsFiles\n      };\n    }\n\n    files.forEach(function (file) {\n      var filePath = path.join(dir, file);\n      if (excludeMap[filePath] === 1) {\n        return;\n      }\n      var stat = fs.statSync(filePath);\n      if (!stat.isFile()) {\n        return dirs.push(filePath);\n      }\n      var extname = path.extname(filePath);\n      if (!extname || extname === '.js' || extname === '.jsx') {\n        jsFiles.push(filePath);\n      }\n    });\n    return {\n      dirs: dirs,\n      jsFiles: jsFiles\n    };\n  }\n\n  var dirs = [root];\n  var jsFiles = [];\n  do {\n    var result = parseDir(dirs.pop());\n    jsFiles = jsFiles.concat(result.jsFiles);\n    dirs = dirs.concat(result.dirs);\n  } while(dirs.length);\n  debug('in folder %s exclude %j, get js files: %j',\n    root, Object.keys(excludeMap), jsFiles);\n  return jsFiles;\n};\n\n/**\n * @api private\n */\nAutod.prototype.parseFile = function (filePath) {\n  var file;\n  try {\n    file = fs.readFileSync(filePath, 'utf-8');\n    if (!this.notransform) {\n      var res = babel.transform(file, {\n        presets: [require('babel-preset-react'), require('babel-preset-es2015'), require('babel-preset-stage-0')],\n      });\n      file = res.code;\n    }\n  } catch (err) {\n    this.emit('warn', util.format('Read(or transfrom) file %s error', filePath));\n  }\n  var modules = [];\n  var self = this;\n\n  crequire(file, true).forEach(function (r) {\n    var parsed = MODULE_REG.exec(r.path);\n    if (!parsed) {\n      return;\n    }\n    var scope = parsed[1];\n    var name = parsed[2];\n    if (scope) {\n      name = scope + name;\n    }\n    modules.push(name);\n    self.dependencyMap[name] = self.dependencyMap[name] || [];\n    self.dependencyMap[name].push(filePath);\n  });\n\n  // support plugin parse file\n  if (this.plugin) {\n    var pluginModules = this.plugin(filePath, file) || [];\n    pluginModules.forEach(function (name) {\n      modules.push(name);\n      self.dependencyMap[name] = self.dependencyMap[name] || [];\n      self.dependencyMap[name].push(filePath);\n    })\n  }\n\n  debug('file %s get modules %j', filePath, modules);\n  return modules;\n};\n\nAutod.USER_AGENT = 'autod-check/' + pkg.version + ' ' + urllib.USER_AGENT;\n\n/**\n * @api private\n */\nAutod.prototype.requestNpmTag = function (name, tag, callback) {\n  if (typeof tag === 'function') {\n    callback = tag;\n    tag = 'latest';\n  }\n\n  var url = this.registry + '/' + name + '/' + tag;\n  var options = {\n    headers: {\n      'user-agent': Autod.USER_AGENT,\n    },\n    gzip: true,\n    timeout: 10000\n  };\n  urllib.request(url, options, function (err, result) {\n    var errmsg = '';\n    if (err) {\n      return callback(err);\n    }\n    try {\n      result = JSON.parse(result);\n    } catch (e) {\n      errmsg = 'parse origin package info error. ' + e.message;\n      return callback(new Error(errmsg));\n    }\n    var remoteVersion = result && result.version;\n    if (!remoteVersion) {\n      return callback(new Error('no match remote version with tag ' + tag));\n    }\n    callback(null, remoteVersion);\n  });\n};\n\nAutod.prototype.requestNpmAll = function (name, range, callback) {\n  var url = this.registry + '/' + name;\n  var options = {\n    headers: {\n      'user-agent': Autod.USER_AGENT,\n    },\n    gzip: true,\n    timeout: 10000\n  };\n  urllib.request(url, options, function (err, result) {\n    var errmsg = '';\n    if (err) {\n      return callback(err);\n    }\n    try {\n      result = JSON.parse(result);\n    } catch (e) {\n      errmsg = 'parse origin package info error. ' + e.message;\n      return callback(new Error(errmsg));\n    }\n\n    if (!result.versions) {\n      return callback(new Error('can not get versions of ' + name));\n    }\n\n    var version = semver.maxSatisfying(Object.keys(result.versions), range);\n    if (!version) {\n      var msg = util.format('can not found any match version of %s with range of %s', name, range);\n      return callback(new Error(msg));\n    }\n\n    return callback(null, version);\n  });\n}\n\n/**\n * @api private\n */\nAutod.prototype.listVersions = function (deps, callback) {\n  if (!deps.length) {\n    callback(null, {});\n  }\n  var self = this;\n  var queue = new bagpipe(5);\n  var count = deps.length;\n  var versions = {};\n  var errNames = [];\n  function done() {\n    if (--count === 0) {\n      debug('list versions get %j, error package names: %j', versions, errNames);\n      var err = null;\n      if (errNames.length) {\n        err = new Error(util.format('package %j get remote version error.', errNames));\n        err.names = errNames;\n      }\n      return callback(err, versions);\n    }\n  }\n\n  deps.forEach(function (name) {\n    var tag = 'latest';\n    var handler = self.requestNpmTag.bind(self);\n\n    var inputTag = self.semver[name];\n    if (inputTag) {\n      if (semver.validRange(inputTag)) handler = self.requestNpmAll.bind(self);\n      tag = inputTag;\n    }\n\n    queue.push(handler, name, tag, function (err, version) {\n      if (err) {\n        errNames.push(name);\n      } else {\n        versions[name] = version;\n      }\n      done();\n    });\n  });\n};\n\nfunction union(arrOne, arrTwo) {\n  arrOne = arrOne || [];\n  arrTwo = arrTwo || [];\n  var map = {};\n  arrOne.concat(arrTwo).forEach(function (name) {\n    map[name] = true;\n  });\n  return Object.keys(map);\n}\n\n/**\n * @api private\n */\nAutod.prototype.resolveWithRoot = function(dirs) {\n  return dirs.map(function (dir) {\n    return path.resolve(this.root, dir);\n  }, this);\n};\n\nAutod.prototype.removeExclude = function(dirs) {\n  return dirs.filter(function (dir) {\n    return this.exclude.indexOf(dir) === -1;\n  }, this);\n};\n\n/**\n * @api public\n */\nAutod.prototype.parse = function (callback) {\n  var depExclude = this.exclude.concat(this.testRoots);\n  var self = this;\n\n  function isCoreModule(name) {\n    var filename;\n    try {\n      filename = require.resolve(name);\n    } catch (err) {\n      return false;\n    }\n    return filename === name;\n  }\n\n  function getDeps(files) {\n    var depMap = {};\n    files.forEach(function (file) {\n      self.parseFile(file).forEach(function (dep) {\n        if (!isCoreModule(dep)) {\n          depMap[dep] = 1;\n        } else {\n          delete self.dependencyMap[dep];\n        }\n      });\n    });\n    return Object.keys(depMap);\n  }\n  var deps = getDeps(this.findJsFile(this.root, depExclude));\n  // add deps input\n  deps = deps.concat(this.dep);\n\n  var devDeps = [];\n  this.testRoots.forEach(function (testRoot) {\n    devDeps = devDeps.concat(getDeps(this.findJsFile(testRoot, this.exclude)));\n  }.bind(this));\n  // add devdeps input\n  devDeps = devDeps.concat(this.devdep);\n\n  self.listVersions(deps, function (err, depVersions) {\n    var isError = false;\n    var errNames = [];\n    if (err) {\n      isError = true;\n      errNames = errNames.concat(err.names || []);\n    }\n\n    self.listVersions(devDeps, function (err, devDepVersions) {\n      if (err) {\n        isError = true;\n        errNames = union(errNames, err.names);\n      }\n\n      for (var key in devDepVersions) {\n        if (depVersions.hasOwnProperty(key)) {\n          delete devDepVersions[key];\n        }\n      }\n\n      for (var key in self.dependencyMap) {\n        self.dependencyMap[key] = union(self.dependencyMap[key]);\n      }\n\n      var result = {\n        dependencies: depVersions || {},\n        devDependencies: devDepVersions || {},\n        map: self.dependencyMap\n      };\n      if (isError) {\n        err = new Error(util.format('package %j get remote version error.', errNames));\n        err.map = self.dependencyMap;\n        err.names = errNames;\n        var errorMap = {};\n        errNames.forEach(function (name) {\n          errorMap[name] = self.dependencyMap[name];\n        });\n        err.errorMap = errorMap;\n        return callback(err, result);\n      }\n      callback(null, result);\n    });\n  });\n  return this;\n};\n\nmodule.exports = Autod;\n"}